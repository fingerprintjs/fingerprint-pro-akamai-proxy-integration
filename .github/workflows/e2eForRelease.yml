name: Test e2e for release

on:
  release:
    types:
      - published
      # TODO Remove
      - edited

jobs:
  get-subdomain:
    runs-on: ubuntu-20.04
    name: Get subdomain
    outputs:
        SUBDOMAIN: ${{ steps.extract-tag.outputs.SUBDOMAIN }}
    steps:
      - name: Extract Tag Name
        id: extract-tag
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          echo SUBDOMAIN=$(echo ${{ github.event.release.tag_name }} | perl -pe 's/[^a-zA-Z0-9]+/-/g and s/-+$//g' | tr '[:upper:]' '[:lower:]') >> $GITHUB_OUTPUT

      - name: Output subdomain
        run: echo ${{ steps.extract-tag.outputs.SUBDOMAIN }}

  deploy-property:
    name: Deploy Akamai property
    needs:
      - get-subdomain
    uses: ./.github/workflows/akamai_deploy_property.yml
    secrets: inherit
    with:
        SUBDOMAIN: ${{ needs.get-subdomain.outputs.SUBDOMAIN }}

  wait-for-property:
    name: Wait for Akamai property
    needs:
      - get-subdomain
      - deploy-property
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
      - name: Install dependencies
        run: yarn install

      - name: Wait for property
        run: yarn ts-node scripts/waitForProperty.ts
        env:
          URL: https://${{steps.get-subdomain.outputs.SUBDOMAIN}}.${{secrets.FPJS_CI_DOMAIN}}/${{secrets.INTEGRATION_PATH}}/status

  test-e2e:
    runs-on: ubuntu-20.04
    name: Test e2e for release
    needs:
        - wait-for-property
        - get-subdomain
    steps:
      - uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
      - name: Install dependencies
        run: yarn install
      - name: Install Playwright
        run: npx playwright install
      - name: Extract Tag Name
        id: extract-tag
        env:
          TAG_NAME: ${{ github.event.release.tag_name }}
        run: |
          echo SUBDOMAIN=$(echo ${{ github.event.release.tag_name }} | perl -pe 's/[^a-zA-Z0-9]+/-/g and s/-+$//g' | tr '[:upper:]' '[:lower:]') >> $GITHUB_OUTPUT
      - name: Run test
        run:  yarn test:e2e
        env:
          TEST_DOMAIN: 'https://${{steps.get-subdomain.outputs.SUBDOMAIN}}.${{secrets.FPJS_CI_DOMAIN}}/${{secrets.INTEGRATION_PATH}}/status'
          TEST_RESULT_DOMAIN: ${{secrets.TEST_RESULT_DOMAIN}}
          TEST_RESULT_PATH: ${{secrets.TEST_RESULT_PATH}}
          INTEGRATION_PATH: ${{secrets.INTEGRATION_PATH}}
          RESULT_PATH: ${{secrets.RESULT_PATH}}
          AGENT_PATH: ${{secrets.AGENT_PATH}}
          FPJS_API_KEY: ${{secrets.FPJS_API_KEY}}

  cleanup-property:
    runs-on: ubuntu-20.04
    name: Cleanup Akamai property
    if: ${{ always() }}
    needs:
      - test-e2e
      - get-subdomain
    steps:
      - name: Check If DNS Record Exists
        id: cloudflare-dns-check
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/dns_records?name=${{steps.extract-tag.outputs.SUBDOMAIN}}.${{secrets.FPJS_CI_DOMAIN}}&tags=owner:akamai-integration-ci'
          method: 'GET'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.CF_AUTH_TOKEN }}"}'
      - name: Delete Cloudflare DNS Record
        if: ${{ fromJson(steps.cloudflare-dns-check.outputs.response).result_info.total_count > 0 }}
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/dns_records/${{ fromJson(steps.cloudflare-dns-check.outputs.response).result[0].id }}'
          method: 'DELETE'
          customHeaders: '{"Authorization": "Bearer ${{ secrets.CF_AUTH_TOKEN }}"}'
